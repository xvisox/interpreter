-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelSeeemcrd where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsSeeemcrd

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsSeeemcrd.Ident -> Result
transIdent x = case x of
  AbsSeeemcrd.Ident string -> failure x

transProgram :: Show a => AbsSeeemcrd.Program' a -> Result
transProgram x = case x of
  AbsSeeemcrd.PProgram _ topdefs -> failure x

transTopDef :: Show a => AbsSeeemcrd.TopDef' a -> Result
transTopDef x = case x of
  AbsSeeemcrd.FnDef _ type_ ident args block -> failure x
  AbsSeeemcrd.GlobalDef _ type_ items -> failure x

transArgType :: Show a => AbsSeeemcrd.ArgType' a -> Result
transArgType x = case x of
  AbsSeeemcrd.ValArg _ type_ -> failure x
  AbsSeeemcrd.RefArg _ type_ -> failure x

transArg :: Show a => AbsSeeemcrd.Arg' a -> Result
transArg x = case x of
  AbsSeeemcrd.AArg _ argtype ident -> failure x

transBlock :: Show a => AbsSeeemcrd.Block' a -> Result
transBlock x = case x of
  AbsSeeemcrd.BBlock _ stmts -> failure x

transStmt :: Show a => AbsSeeemcrd.Stmt' a -> Result
transStmt x = case x of
  AbsSeeemcrd.BStmt _ block -> failure x
  AbsSeeemcrd.DStmt _ topdef -> failure x
  AbsSeeemcrd.Ass _ ident expr -> failure x
  AbsSeeemcrd.Incr _ ident -> failure x
  AbsSeeemcrd.Decr _ ident -> failure x
  AbsSeeemcrd.Ret _ expr -> failure x
  AbsSeeemcrd.VRet _ -> failure x
  AbsSeeemcrd.Cond _ expr block -> failure x
  AbsSeeemcrd.CondElse _ expr block1 block2 -> failure x
  AbsSeeemcrd.While _ expr block -> failure x
  AbsSeeemcrd.SExp _ expr -> failure x

transItem :: Show a => AbsSeeemcrd.Item' a -> Result
transItem x = case x of
  AbsSeeemcrd.NoInit _ ident -> failure x
  AbsSeeemcrd.Init _ ident expr -> failure x

transType :: Show a => AbsSeeemcrd.Type' a -> Result
transType x = case x of
  AbsSeeemcrd.Int _ -> failure x
  AbsSeeemcrd.Str _ -> failure x
  AbsSeeemcrd.Bool _ -> failure x
  AbsSeeemcrd.Void _ -> failure x
  AbsSeeemcrd.Fun _ type_ argtypes -> failure x

transExpr :: Show a => AbsSeeemcrd.Expr' a -> Result
transExpr x = case x of
  AbsSeeemcrd.EVar _ ident -> failure x
  AbsSeeemcrd.ELitInt _ integer -> failure x
  AbsSeeemcrd.ELitTrue _ -> failure x
  AbsSeeemcrd.ELitFalse _ -> failure x
  AbsSeeemcrd.EApp _ ident exprs -> failure x
  AbsSeeemcrd.EString _ string -> failure x
  AbsSeeemcrd.ELambda _ type_ args block -> failure x
  AbsSeeemcrd.Neg _ expr -> failure x
  AbsSeeemcrd.Not _ expr -> failure x
  AbsSeeemcrd.EMul _ expr1 mulop expr2 -> failure x
  AbsSeeemcrd.EAdd _ expr1 addop expr2 -> failure x
  AbsSeeemcrd.ERel _ expr1 relop expr2 -> failure x
  AbsSeeemcrd.EAnd _ expr1 expr2 -> failure x
  AbsSeeemcrd.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsSeeemcrd.AddOp' a -> Result
transAddOp x = case x of
  AbsSeeemcrd.Plus _ -> failure x
  AbsSeeemcrd.Minus _ -> failure x

transMulOp :: Show a => AbsSeeemcrd.MulOp' a -> Result
transMulOp x = case x of
  AbsSeeemcrd.Times _ -> failure x
  AbsSeeemcrd.Div _ -> failure x
  AbsSeeemcrd.Mod _ -> failure x

transRelOp :: Show a => AbsSeeemcrd.RelOp' a -> Result
transRelOp x = case x of
  AbsSeeemcrd.LTH _ -> failure x
  AbsSeeemcrd.LE _ -> failure x
  AbsSeeemcrd.GTH _ -> failure x
  AbsSeeemcrd.GE _ -> failure x
  AbsSeeemcrd.EQU _ -> failure x
  AbsSeeemcrd.NE _ -> failure x
