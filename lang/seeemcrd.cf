-- Hubert Michalski -- JPP language syntax

-- Programs and functions ---------------------------------

entrypoints        Program ;

PProgram.          Program ::= [TopDef] ;

FnDef.	           TopDef ::= Type Ident "(" [Arg] ")" Block ;

GlobalDef.         TopDef ::= Type [Item] ";" ;

separator nonempty TopDef "" ;

ValArg.            ArgType ::= Type ;

RefArg.            ArgType ::= Type "&" ;

separator          ArgType "," ;

AArg. 	           Arg ::= ArgType Ident;

separator          Arg "," ;

-- Statements and declarations ----------------------------

BBlock.            Block ::= "{" [Stmt] "}" ;

separator          Stmt "" ;

BStmt.             Stmt ::= Block ;

DStmt.             Stmt ::= TopDef ;

NoInit.            Item ::= Ident ;

Init.              Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.               Stmt ::= Ident "=" Expr  ";" ;

Incr.              Stmt ::= Ident "++"  ";" ;

Decr.              Stmt ::= Ident "--"  ";" ;

Ret.               Stmt ::= "return" Expr ";" ;

VRet.              Stmt ::= "return" ";" ;

Cond.              Stmt ::= "if" "(" Expr ")" Block  ;

CondElse.          Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

While.             Stmt ::= "while" "(" Expr ")" Block ;

SExp.              Stmt ::= Expr  ";" ;

-- Types --------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

Fun.       Type ::= Type "(" [ArgType] ")" ;

separator  Type "," ;

-- Expressions --------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

ELambda.   Expr5 ::= Type "lambda" "(" [Arg] ")" "=>" Block ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- Operators ----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- Comments -----------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
